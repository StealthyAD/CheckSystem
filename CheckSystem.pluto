--[[

      _____  _    _  ______  _____  _  __  _____ __     __ _____  _______  ______  __  __ 
     / ____|| |  | ||  ____|/ ____|| |/ / / ____|\ \   / // ____||__   __||  ____||  \/  |
    | |     | |__| || |__  | |     | ' / | (___   \ \_/ /| (___     | |   | |__   | \  / |
    | |     |  __  ||  __| | |     |  <   \___ \   \   /  \___ \    | |   |  __|  | |\/| |
    | |____ | |  | || |____| |____ | . \  ____) |   | |   ____) |   | |   | |____ | |  | |
     \_____||_|  |_||______|\_____||_|\_\|_____/    |_|  |_____/    |_|   |______||_|  |_|
                                                                                        
                                                                                       
    Features:
    - Compatible All Stand Versions if deprecated versions too.

    Help with Lua?
    - GTAV Natives: https://nativedb.dotindustries.dev/natives/
    - FiveM Docs Natives: https://docs.fivem.net/natives/
    - Stand Lua Documentation: https://stand.gg/help/lua-api-documentation
    - Lua Documentation: https://www.lua.org/docs.html                                                                                       

]]--

    util.keep_running()
    util.require_natives(1663599433)

    local VRS = "0.4"
    local CheckSystem = "> CheckSystem "..VRS
    local root = menu.my_root()

    root:divider("CheckSystem "..VRS)
    local DetectSystem = root:list("Detection Options")
    local KickSystem = root:list("Kick Options")
    local CrashSystem = root:list("Crash Options")

    CheckSession =  function() return util.is_session_started() and not util.is_session_transition_active() end
    CheckNotify = function(str) if NotifMode == 2 then util.show_corner_help(CheckSystem.."~s~~n~"..str ) else util.toast(CheckSystem.."\n"..str) end end

    local kick_time = 0

    ----======================================----
    ---             Update Parts
    ---      The Useful Part of scripts
    ----======================================----

        local status, auto_updater = pcall(require, "auto-updater")
        if not status then
            local auto_update_complete = nil FreedomNotify("Installing auto-updater...", TOAST_ALL)
            async_http.init("raw.githubusercontent.com", "/hexarobi/stand-lua-auto-updater/main/auto-updater.lua",
                function(result, headers, status_code)
                    local function parse_auto_update_result(result, headers, status_code)
                        local error_prefix = "Error downloading auto-updater: "
                        if status_code ~= 200 then FreedomNotify(error_prefix..status_code, TOAST_ALL) return false end
                        if not result or result == "" then FreedomNotify(error_prefix.."Found empty file.", TOAST_ALL) return false end
                        filesystem.mkdir(filesystem.scripts_dir() .. "lib")
                        local file = io.open(filesystem.scripts_dir() .. "lib\\auto-updater.lua", "wb")
                        if file == nil then FreedomNotify(error_prefix.."Could not open file for writing.", TOAST_ALL) return false end
                        file:write(result) file:close() FreedomNotify("Successfully installed auto-updater lib", TOAST_ALL) return true
                    end
                    auto_update_complete = parse_auto_update_result(result, headers, status_code)
                end, function() FreedomNotify("Error downloading auto-updater lib. Update failed to download.", TOAST_ALL) end)
            async_http.dispatch() local i = 1 while (auto_update_complete == nil and i < 40) do util.yield(250) i = i + 1 end
            if auto_update_complete == nil then error("Error downloading auto-updater lib. HTTP Request timeout") end
            auto_updater = require("auto-updater")
        end
        if auto_updater == true then error("Invalid auto-updater lib. Please delete your Stand/Lua Scripts/lib/auto-updater.lua and try again") end

        local default_check_interval = 604800
        local auto_update_config = {
            source_url="https://raw.githubusercontent.com/StealthyAD/CheckSystem/main/CheckSystem.pluto",
            script_relpath=SCRIPT_RELPATH,
            switch_to_branch=selected_branch,
            verify_file_begins_with="--",
            check_interval=86400,
            silent_updates=true,
        }

        auto_updater.run_auto_update(auto_update_config)

    ----======================================----
    ---       Detection/Kick/Crash Options
    ---      Detect pests until you're safe
    ----======================================----

        local languages = {
            ["English"] = {0, {"United States", "United Kingdom", "Australia", "Ireland", "Canada", "India", "New Zealand", "Commonwealth Countries", "Baltic Countries (Lithuania, Estonia, Latvia)", "Nordic Countries (Denmark, Norway, Sweden, Finland, Iceland)", "And every countries not listed."}},
            ["French"] = {1, {"Metropolitan France", "Overseas France (includes La Réunion, Martinique, Guadeloupe, etc...)", "Belgium", "Switzerland", "African Countries", "Canada (Quebec)"}},
            ["German"] = {2, {"Germany", "Austria", "Switzerland", "Belgium", "Liechtenstein"}},
            ["Italian"] = {3, {"Italy", "San Marino", "Switzerland", "Vatican City"}},
            ["Spanish"] = {4, {"Spain", "Overseas Spain", "American Countries (Argentina, Cuba, Colombia, Peru, Panama, Paraguay, etc...)", "African Countries"}},
            ["Portuguese"] = {5, {"Portugal", "Brazil", "Angola", "Cabo Verde", "Timor Leste", "Equatorial Guinea", "Mozambique", "São Tomé and Príncipe", "Macau (China Mainland)"}},
            ["Polish"] = {6, {"Poland", "Belarus"}},
            ["Russian"] = {7, {"Russian Federation", "Ukraine", "Belarus", "Kazakhstan", "Georgia", "Armenia", "Mongolia", "Tajikistan", "Azerbaijan", "Moldova (Transnistria)", "Turkmenistan", "Uzbekistan", "Kyrgyzstan"}},
            ["Korean"] = {8, {"South Korea", "North Korea"}},
            ["Chinese Traditional"] = {9, {"Taiwan Island"}},
            ["Japanese"] = {10, {"Japan"}},
            ["Mexican"] = {11, {"Mexico"}},
            ["Chinese Simplified"] = {12, {"China Mainland", "Taiwan Island", "Thailand (minority)", "Hong Kong", "Macau", "Singapore"}}
        }
 
        local sorted_languages = {}

        for language, data in pairs(languages) do
            table.insert(sorted_languages, {language, data})
        end

        table.sort(sorted_languages, function(a, b) return a[2][1] < b[2][1] end)

        for i, language_data in ipairs(sorted_languages) do
            local language = language_data[1]
            local data = language_data[2]
            
            DetectSystem:action("Detect " .. language, {"adetect" .. string.lower(language)}, "To be precise for Locations:\n\n-" .. table.concat(data[2], "\n-"), function()
                local languageFound = false 
                for pid in players.list(false, true, true) do
                    local languageIndex = players.get_language(pid)
                    if languageIndex == data[1] then
                        if players.get_name(pid) ~= "UndiscoveredPlayer" then
                            CheckNotify(players.get_name(pid).. " is " .. language)
                            languageFound = true
                            repeat
                                util.yield()
                            until pid ~= nil
                        end
                    end
                end
                if not languageFound then 
                    CheckNotify("We can't find " .. language .. " in the Session")
                end
            end)

            local kick_time = 0
            KickSystem:toggle_loop("Auto Kick " .. language, {"akick" .. string.lower(language)}, "To be precise for Locations:\n\n-" .. table.concat(data[2], "\n-"), function()
                for players.list(false, false, true) as pid do
                    local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                    util.yield(10)
                    kick_time += 1
                    local languageIndex = players.get_language(pid)
                        if languageIndex == data[1] then
                            util.yield(15)
                            if kick_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                                menu.trigger_commands("breakup" .. players.get_name(pid))
                                repeat
                                    util.yield()
                                until pid ~= nil
                                kick_time = 0
                            end
                        end
                    end 
                end, function()
            end)

            local crash_time = 0
            CrashSystem:toggle_loop("Auto Crash " .. language, {"acrash" .. string.lower(language)}, "To be precise for Locations:\n\n-" .. table.concat(data[2], "\n-"), function()
                for players.list(false, false, true) as pid do
                    local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                    util.yield(10)
                    crash_time += 1
                    local languageIndex = players.get_language(pid)
                        if languageIndex == data[1] then
                            util.yield(15)
                            if crash_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                                menu.trigger_commands("crash" .. players.get_name(pid))
                                repeat
                                    util.yield()
                                until pid ~= nil
                                crash_time = 0
                            end
                        end
                    end 
                end, function()
            end)
        end

    ----======================================----
    ---                Others
    ---      The Useless Part of scripts
    ----======================================----

        root:action("Disclaimer", {}, "", function()
        async_http.init("raw.githubusercontent.com","/StealthyAD/CheckSystem/main/Disclaimer", function(content)
            if content ~= "404: Not Found" then
                local Disclaimer = string.gsub(content, "\n$", "")
                    CheckNotify("\n"..Disclaimer)
                end
            end)
            async_http.dispatch()
        end)

        root:divider("Credits & Settings")
        root:readonly("StealthyAD")
        root:hyperlink("GitHub Page", "https://github.com/StealthyAD/CheckSystem")
        
        NotifMode = "Stand"
        root:list_select("Notify Mode", {}, "", {"Stand", "Help Message"}, 1, function(selected_mode)
            NotifMode = selected_mode
        end)

        root:action("Check for Updates", {}, "The script will automatically check for updates at most daily, but you can manually check using this option anytime.", function()
        auto_update_config.check_interval = 0
            if auto_updater.run_auto_update(auto_update_config) then
                CheckNotify("No updates found.")
            end
        end)
    
        root:action("Clean Reinstall", {}, "Force an update to the latest version, regardless of current version.", function()
            auto_update_config.clean_reinstall = true
            auto_updater.run_auto_update(auto_update_config)
        end)

    ----======================================----
    ---             Player Parts
    ---      The Useful Part of scripts
    ----======================================----

        players.on_join(function(pid)
            local PRoot = menu.player_root(pid)
            local PlayerName = players.get_name(pid)
            PRoot:divider("CheckSystem "..VRS)
            PRoot:action("Detection Language", {"language"}, "", function()
                if CheckSession() then
                    local languageList = {"English/or non-recognized language", "French", "German", "Italian", "Spanish", "Portuguese/Brazilian", "Polish", "Russian", "Korean", "Chinese (Taiwan)", "Japanese", "Spanish (Mexican)", "Chinese (Mainland China)"}
                    local languageIndex = players.get_language(pid)
                    if languageIndex >= 0 and languageIndex <= 12 then
                        CheckNotify(PlayerName .. " is " .. languageList[languageIndex + 1]..".")
                    end
                end
            end)
        end)

        players.dispatch_on_join()
        players.on_leave(function()end)
