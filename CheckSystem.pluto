--[[

      _____  _    _  ______  _____  _  __  _____ __     __ _____  _______  ______  __  __ 
     / ____|| |  | ||  ____|/ ____|| |/ / / ____|\ \   / // ____||__   __||  ____||  \/  |
    | |     | |__| || |__  | |     | ' / | (___   \ \_/ /| (___     | |   | |__   | \  / |
    | |     |  __  ||  __| | |     |  <   \___ \   \   /  \___ \    | |   |  __|  | |\/| |
    | |____ | |  | || |____| |____ | . \  ____) |   | |   ____) |   | |   | |____ | |  | |
     \_____||_|  |_||______|\_____||_|\_\|_____/    |_|  |_____/    |_|   |______||_|  |_|
                                                                                        
                                                                                       
    Features:
    - Compatible All Stand Versions if deprecated versions too.

    Help with Lua?
    - GTAV Natives: https://nativedb.dotindustries.dev/natives/
    - FiveM Docs Natives: https://docs.fivem.net/natives/
    - Stand Lua Documentation: https://stand.gg/help/lua-api-documentation
    - Lua Documentation: https://www.lua.org/docs.html                                                                                       

]]--

    util.keep_running()
    util.require_natives(1663599433)

    local VRS = "0.3"
    local CheckSystem = "> CheckSystem "..VRS
    local root = menu.my_root()

    root:divider("CheckSystem "..VRS)
    local DetectSystem = root:list("Detection Options")
    local KickSystem = root:list("Kick Options")
    local CrashSystem = root:list("Crash Options")

    CheckSession =  function() return util.is_session_started() and not util.is_session_transition_active() end
    CheckNotify = function(str) if NotifMode == 2 then util.show_corner_help(CheckSystem.."~s~~n~"..str ) else util.toast(CheckSystem.."\n"..str) end end

    local kick_time = 0

    ----======================================----
    ---             Update Parts
    ---      The Useful Part of scripts
    ----======================================----

        local status, auto_updater = pcall(require, "auto-updater")
        if not status then
            local auto_update_complete = nil FreedomNotify("Installing auto-updater...", TOAST_ALL)
            async_http.init("raw.githubusercontent.com", "/hexarobi/stand-lua-auto-updater/main/auto-updater.lua",
                function(result, headers, status_code)
                    local function parse_auto_update_result(result, headers, status_code)
                        local error_prefix = "Error downloading auto-updater: "
                        if status_code ~= 200 then FreedomNotify(error_prefix..status_code, TOAST_ALL) return false end
                        if not result or result == "" then FreedomNotify(error_prefix.."Found empty file.", TOAST_ALL) return false end
                        filesystem.mkdir(filesystem.scripts_dir() .. "lib")
                        local file = io.open(filesystem.scripts_dir() .. "lib\\auto-updater.lua", "wb")
                        if file == nil then FreedomNotify(error_prefix.."Could not open file for writing.", TOAST_ALL) return false end
                        file:write(result) file:close() FreedomNotify("Successfully installed auto-updater lib", TOAST_ALL) return true
                    end
                    auto_update_complete = parse_auto_update_result(result, headers, status_code)
                end, function() FreedomNotify("Error downloading auto-updater lib. Update failed to download.", TOAST_ALL) end)
            async_http.dispatch() local i = 1 while (auto_update_complete == nil and i < 40) do util.yield(250) i = i + 1 end
            if auto_update_complete == nil then error("Error downloading auto-updater lib. HTTP Request timeout") end
            auto_updater = require("auto-updater")
        end
        if auto_updater == true then error("Invalid auto-updater lib. Please delete your Stand/Lua Scripts/lib/auto-updater.lua and try again") end

        local default_check_interval = 604800
        local auto_update_config = {
            source_url="https://raw.githubusercontent.com/StealthyAD/CheckSystem/main/CheckSystem.pluto",
            script_relpath=SCRIPT_RELPATH,
            switch_to_branch=selected_branch,
            verify_file_begins_with="--",
            check_interval=86400,
            silent_updates=true,
        }

        auto_updater.run_auto_update(auto_update_config)

    ----======================================----
    ---             Kick Options
    ---      Kick pests until you're safe
    ----======================================----

        DetectSystem:action("Detect French", {"adetectfrench"}, "To be precise for Locations:\n\n-Metropolitan France\n-Overseas France (includes La Réunion, Martinique, Guadeloupe, etc...)\n-Belgium\n-Switzerland\n-African Countries\n-Canada (Quebec)", function()
            local frenchPlayerFound = false
            for pid in players.list(false, true, true) do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                local languageIndex = players.get_language(pid)
                if languageIndex == 1 then
                    if players.get_name(pid) ~= "UndiscoveredPlayer" then
                        util.toast(players.get_name(pid).. " is French")
                        frenchPlayerFound = true
                        repeat
                            util.yield()
                        until pid ~= nil
                    end
                end
            end
            if not frenchPlayerFound then 
                util.toast("We can't find French in the Session")
            end
        end)
        
        DetectSystem:action("Detect German", {"adetectgerman"}, "To be precise for Locations:\n\n-Germany\n-Austria\n-Switzerland\n-Belgium\n-Liechtenstein", function()
            local germanPlayerFound = false 
            for pid in players.list(false, true, true) do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                local languageIndex = players.get_language(pid)
                if languageIndex == 2 then
                    if players.get_name(pid) ~= "UndiscoveredPlayer" then
                        util.toast(players.get_name(pid).. " is German")
                        germanPlayerFound = true
                        repeat
                            util.yield()
                        until pid ~= nil
                    end
                end
            end
            if not germanPlayerFound then 
                util.toast("We can't find German in the Session")
            end
        end)

        DetectSystem:action("Detect Italian", {"adetectitalian"}, "To be precise for Locations:\n\n-Italy\n-San Marino\n-Switzerland\n-Vatican City", function()
            local italianPlayerFound = false 
            for pid in players.list(false, true, true) do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                local languageIndex = players.get_language(pid)
                if languageIndex == 3 then
                    if players.get_name(pid) ~= "UndiscoveredPlayer" then
                        util.toast(players.get_name(pid).. " is Italian")
                        italianPlayerFound = true
                        repeat
                            util.yield()
                        until pid ~= nil
                    end
                end
            end
            if not italianPlayerFound then 
                util.toast("We can't find Italian in the Session")
            end
        end)

        DetectSystem:action("Detect Spanish", {"adetectspanish"}, "To be precise for Locations:\n\n-Spain\n-Overseas Spain\n-American Countries (Argentina, Cuba, Colombia, Peru, Panama, Paraguay, etc...)\n-African Countries", function()
            local spanishPlayerFound = false 
            for pid in players.list(false, true, true) do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                local languageIndex = players.get_language(pid)
                if languageIndex == 4 then
                    if players.get_name(pid) ~= "UndiscoveredPlayer" then
                        util.toast(players.get_name(pid).. " is Spanish")
                        spanishPlayerFound = true
                        repeat
                            util.yield()
                        until pid ~= nil
                    end
                end
            end
            if not spanishPlayerFound then 
                util.toast("We can't find Spanish in the Session")
            end
        end)

        DetectSystem:action("Detect Portuguese", {"adetectportuguese"}, "To be precise for Locations:\n\n-Portugal\n-Brazil\n-Angola\n-Cabo Verde\n-Timor Leste\n-Equatorial Guinea\n-Mozambique\n-São Tomé and Príncipe\n-Macau (China Mainland)", function()
            local portuguesePlayerFound = false 
            for pid in players.list(false, true, true) do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                local languageIndex = players.get_language(pid)
                if languageIndex == 5 then
                    if players.get_name(pid) ~= "UndiscoveredPlayer" then
                        util.toast(players.get_name(pid).. " is Portuguese")
                        portuguesePlayerFound = true
                        repeat
                            util.yield()
                        until pid ~= nil
                    end
                end
            end
            if not portuguesePlayerFound then 
                util.toast("We can't find Portuguese in the Session")
            end
        end)

        DetectSystem:action("Detect Polish", {"adetectpolish"}, "To be precise for Locations:\n\n-Poland\n-Belarus", function()
            local polishPlayerFound = false 
            for pid in players.list(false, true, true) do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                local languageIndex = players.get_language(pid)
                if languageIndex == 6 then
                    if players.get_name(pid) ~= "UndiscoveredPlayer" then
                        util.toast(players.get_name(pid).. " is Polish")
                        polishPlayerFound = true
                        repeat
                            util.yield()
                        until pid ~= nil
                    end
                end
            end
            if not polishPlayerFound then 
                util.toast("We can't find Polish in the Session")
            end
        end)

        DetectSystem:action("Detect Russian", {"adetectrussian"}, "To be precise for Locations:\n\n-Russian Federation\n-Ukraine\n-Belarus\n-Kazakhstan\n-Georgia\n-Armenia\n-Mongolia\n-Tajikistan\n-Azerbaijan\n-Moldova (Transnistria)\n-Turkmenistan\n-Uzbekistan\n-Kyrgyzstan", function()
            local ruskiPlayerFound = false 
            for pid in players.list(false, true, true) do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                local languageIndex = players.get_language(pid)
                if languageIndex == 7 then
                    if players.get_name(pid) ~= "UndiscoveredPlayer" then
                        util.toast(players.get_name(pid).. " is Russian")
                        ruskiPlayerFound = true
                        repeat
                            util.yield()
                        until pid ~= nil
                    end
                end
            end
            if not ruskiPlayerFound then 
                util.toast("We can't find Russian in the Session")
            end
        end)

        DetectSystem:action("Detect Korean", {"adetectkorean"}, "To be precise for Locations:\n\n-South Korea\n-North Korea", function()
            local koreanPlayerFound = false 
            for pid in players.list(false, true, true) do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                local languageIndex = players.get_language(pid)
                if languageIndex == 8 then
                    if players.get_name(pid) ~= "UndiscoveredPlayer" then
                        util.toast(players.get_name(pid).. " is Korean")
                        koreanPlayerFound = true
                        repeat
                            util.yield()
                        until pid ~= nil
                    end
                end
            end
            if not koreanPlayerFound then 
                util.toast("We can't find Korean in the Session")
            end
        end)

        DetectSystem:action("Detect Chinese (Taiwan)", {"adetecttaiwan"}, "To be precise for Locations:\n\n-Taiwan Island", function()
            local taiwanPlayerFound = false 
            for pid in players.list(false, true, true) do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                local languageIndex = players.get_language(pid)
                if languageIndex == 9 then
                    if players.get_name(pid) ~= "UndiscoveredPlayer" then
                        util.toast(players.get_name(pid).. " is Chinese (Taiwan)")
                        taiwanPlayerFound = true
                        repeat
                            util.yield()
                        until pid ~= nil
                    end
                end
            end
            if not taiwanPlayerFound then 
                util.toast("We can't find Chinese (Taiwan) in the Session")
            end
        end)

        DetectSystem:action("Detect Japanese", {"adetectjapan"}, "To be precise for Locations:\n\n-Japan", function()
            local japanesePlayerFound = false 
            for pid in players.list(false, true, true) do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                local languageIndex = players.get_language(pid)
                if languageIndex == 10 then
                    if players.get_name(pid) ~= "UndiscoveredPlayer" then
                        util.toast(players.get_name(pid).. " is Japanese")
                        japanesePlayerFound = true
                        repeat
                            util.yield()
                        until pid ~= nil
                    end
                end
            end
            if not japanesePlayerFound then 
                util.toast("We can't find Japanese in the Session")
            end
        end)

        DetectSystem:action("Detect Mexican", {"adetectmexico"}, "To be precise for Locations:\n\n-Mexico", function()
            local mexicoPlayerFound = false 
            for pid in players.list(false, true, true) do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                local languageIndex = players.get_language(pid)
                if languageIndex == 11 then
                    if players.get_name(pid) ~= "UndiscoveredPlayer" then
                        util.toast(players.get_name(pid).. " is Spanish (Mexico)")
                        mexicoPlayerFound = true
                        repeat
                            util.yield()
                        until pid ~= nil
                    end
                end
            end
            if not mexicoPlayerFound then 
                util.toast("We can't find Spanish (Mexico) in the Session")
            end
        end)

        DetectSystem:action("Detect Chinese", {"adetectchina"}, "To be precise for Locations:\n\n-China Mainland\n-Taiwan Island\n-Thailand (minority)\n-Hong Kong\n-Macau\n-Singapore", function()
            local chinaPlayerFound = false 
            for pid in players.list(false, true, true) do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                local languageIndex = players.get_language(pid)
                if languageIndex == 12 then
                    if players.get_name(pid) ~= "UndiscoveredPlayer" then
                        util.toast(players.get_name(pid).. " is Chinese")
                        chinaPlayerFound = true
                        repeat
                            util.yield()
                        until pid ~= nil
                    end
                end
            end
            if not chinaPlayerFound then 
                util.toast("We can't find Chinese in the Session")
            end
        end)

    ----======================================----
    ---             Kick Options
    ---      Kick pests until you're safe
    ----======================================----

        KickSystem:toggle_loop("Auto Kick French", {"akickfrench"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                kick_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 1 then
                        util.yield(15)
                        if kick_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("breakup" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            kick_time = 0
                        end
                    end
                end 
            end, function()
        end)

        KickSystem:toggle_loop("Auto Kick German", {"akickgerman"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                kick_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 2 then
                        util.yield(15)
                        if kick_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("breakup" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            kick_time = 0
                        end
                    end
                end 
            end, function()
        end)

        KickSystem:toggle_loop("Auto Kick Italian", {"akickitalian"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                kick_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 3 then
                        util.yield(15)
                        if kick_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("breakup" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            kick_time = 0
                        end
                    end
                end 
            end, function()
        end)

        KickSystem:toggle_loop("Auto Kick Spanish", {"akickspanish"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                kick_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 4 then
                        util.yield(15)
                        if kick_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("breakup" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            kick_time = 0
                        end
                    end
                end 
            end, function()
        end)

        KickSystem:toggle_loop("Auto Kick Portuguese", {"akickportuguese"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                kick_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 5 then
                        util.yield(15)
                        if kick_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("breakup" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            kick_time = 0
                        end
                    end
                end 
            end, function()
        end)

        KickSystem:toggle_loop("Auto Kick Polish", {"akickpolish"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                kick_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 6 then
                        util.yield(15)
                        if kick_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("breakup" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            kick_time = 0
                        end
                    end
                end 
            end, function()
        end)

        KickSystem:toggle_loop("Auto Kick Russian", {"akickrussian"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                kick_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 7 then
                        util.yield(15)
                        if kick_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("breakup" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            kick_time = 0
                        end
                    end
                end 
            end, function()
        end)

        KickSystem:toggle_loop("Auto Kick Korean", {"akickkorean"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                kick_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 8 then
                        util.yield(15)
                        if kick_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("breakup" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            kick_time = 0
                        end
                    end
                end 
            end, function()
        end)

        KickSystem:toggle_loop("Auto Kick Chinese (Taiwan)", {"akicktaiwan"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                kick_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 9 then
                        util.yield(15)
                        if kick_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("breakup" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            kick_time = 0
                        end
                    end
                end 
            end, function()
        end)

        KickSystem:toggle_loop("Auto Kick Japanese", {"akickjapan"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                kick_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 10 then
                        util.yield(15)
                        if kick_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("breakup" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            kick_time = 0
                        end
                    end
                end 
            end, function()
        end)

        KickSystem:toggle_loop("Auto Kick Mexicans", {"akickmexico"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                kick_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 11 then
                        util.yield(15)
                        if kick_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("breakup" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            kick_time = 0
                        end
                    end
                end 
            end, function()
        end)

        KickSystem:toggle_loop("Auto Kick Chinese (Mainland)", {"akickchina"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                kick_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 12 then
                        util.yield(15)
                        if kick_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("breakup" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            kick_time = 0
                        end
                    end
                end 
            end, function()
        end)

    ----======================================----
    ---             Crash Options
    ---      Crash pests until you're safe
    ----======================================----

        local crash_time = 0

        CrashSystem:toggle_loop("Auto Crash French", {"acrashfrench"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                crash_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 1 then
                        util.yield(15)
                        if crash_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("crash" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            crash_time = 0
                        end
                    end
                end 
            end, function()
        end)

        CrashSystem:toggle_loop("Auto Crash German", {"acrashgerman"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                crash_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 2 then
                        util.yield(15)
                        if crash_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("crash" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            crash_time = 0
                        end
                    end
                end 
            end, function()
        end)

        CrashSystem:toggle_loop("Auto Crash Italian", {"acrashitalian"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                crash_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 3 then
                        util.yield(15)
                        if crash_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("crash" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            crash_time = 0
                        end
                    end
                end 
            end, function()
        end)

        CrashSystem:toggle_loop("Auto Crash Spanish", {"acrashspanish"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                crash_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 4 then
                        util.yield(15)
                        if crash_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("crash" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            crash_time = 0
                        end
                    end
                end 
            end, function()
        end)

        CrashSystem:toggle_loop("Auto Crash Portuguese", {"acrashportuguese"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                crash_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 5 then
                        util.yield(15)
                        if crash_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("crash" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            crash_time = 0
                        end
                    end
                end 
            end, function()
        end)

        CrashSystem:toggle_loop("Auto Crash Polish", {"acrashpolish"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                crash_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 6 then
                        util.yield(15)
                        if crash_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("crash" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            crash_time = 0
                        end
                    end
                end 
            end, function()
        end)

        CrashSystem:toggle_loop("Auto Crash Russian", {"acrashrussian"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                crash_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 7 then
                        util.yield(15)
                        if crash_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("crash" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            crash_time = 0
                        end
                    end
                end 
            end, function()
        end)

        CrashSystem:toggle_loop("Auto Crash Korean", {"acrashkorean"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                crash_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 8 then
                        util.yield(15)
                        if crash_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("crash" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            crash_time = 0
                        end
                    end
                end 
            end, function()
        end)

        CrashSystem:toggle_loop("Auto Crash Chinese (Taiwan)", {"acrashtaiwan"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                crash_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 9 then
                        util.yield(15)
                        if crash_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("crash" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            crash_time = 0
                        end
                    end
                end 
            end, function()
        end)

        CrashSystem:toggle_loop("Auto Crash Japanese", {"acrashjapan"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                crash_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 10 then
                        util.yield(15)
                        if crash_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("crash" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            crash_time = 0
                        end
                    end
                end 
            end, function()
        end)

        CrashSystem:toggle_loop("Auto Crash Mexicans", {"acrashmexico"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                crash_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 11 then
                        util.yield(15)
                        if crash_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("crash" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            crash_time = 0
                        end
                    end
                end 
            end, function()
        end)

        CrashSystem:toggle_loop("Auto Crash Chinese (Mainland)", {"acrashchina"}, "", function()
            for players.list(false, false, true) as pid do
                local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                util.yield(10)
                crash_time += 1
                local languageIndex = players.get_language(pid)
                    if languageIndex == 12 then
                        util.yield(15)
                        if crash_time >= 3 and not players.get_name(pid) ~= "UndiscoveredPlayer" then
                            menu.trigger_commands("crash" .. players.get_name(pid))
                            repeat
                                util.yield()
                            until pid ~= nil
                            crash_time = 0
                        end
                    end
                end 
            end, function()
        end)

    ----======================================----
    ---                Others
    ---      The Useless Part of scripts
    ----======================================----

        root:action("Disclaimer", {}, "", function()
            CheckNotify("\n".."DISCLAIMER: We are clarify that creating or using a Lua script or any other programming code to discriminate against individuals based on their nationalities or ethnicities, including kicking/crash/detect individuals of different nationalities, is unethical and against the principles of inclusivity and fairness.\n\nDiscrimination based on nationality, race, or any other protected characteristic is unacceptable and goes against fundamental human rights. \n\nIt is important to promote inclusivity, diversity, and respect for all individuals, regardless of their nationalities or ethnicities.")
        end)

        root:divider("Credits & Settings")
        root:readonly("StealthyAD")
        root:hyperlink("GitHub Page", "https://github.com/StealthyAD/CheckSystem")
        root:action("Check for Updates", {}, "The script will automatically check for updates at most daily, but you can manually check using this option anytime.", function()
        auto_update_config.check_interval = 0
            if auto_updater.run_auto_update(auto_update_config) then
                CheckNotify("No updates found.")
            end
        end)

        NotifMode = "Stand"
        root:list_select("Notify Mode", {}, "", {"Stand", "Help Message"}, 1, function(selected_mode)
            NotifMode = selected_mode
        end)
    
        root:action("Clean Reinstall", {}, "Force an update to the latest version, regardless of current version.", function()
            auto_update_config.clean_reinstall = true
            auto_updater.run_auto_update(auto_update_config)
        end)

    ----======================================----
    ---             Player Parts
    ---      The Useful Part of scripts
    ----======================================----

        players.on_join(function(pid)
            local PRoot = menu.player_root(pid)
            local PlayerName = players.get_name(pid)
            PRoot:divider("CheckSystem "..VRS)
            PRoot:action("Detection Language", {"language"}, "", function()
                if CheckSession() then
                    local languageList = {"English/or non-recognized language", "French", "German", "Italian", "Spanish", "Portuguese/Brazilian", "Polish", "Russian", "Korean", "Chinese (Taiwan)", "Japanese", "Spanish (Mexican)", "Chinese (Mainland China)"}
                    local languageIndex = players.get_language(pid)
                    if languageIndex >= 0 and languageIndex <= 12 then
                        util.toast(PlayerName .. " is " .. languageList[languageIndex + 1]..".")
                    end
                end
            end)
        end)

        players.dispatch_on_join()
        players.on_leave(function()end)
